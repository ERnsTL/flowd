package drawfbp

import (
	"encoding/xml"
	"io/ioutil"
	"os"
)

// NOTE: based on the XML schema at https://github.com/jpaulm/drawfbp/blob/master/lib/drawfbp_file.xsd

// File is the root element
type File struct {
	Network Network `xml:"net"` //TODO <net> open tag not generated by DrawFBP -> <drawfbp_file> closed by </net>
}

// Network contains the basic data and the important block and connection lists
type Network struct {
	Description      string       `xml:"desc"`
	ComputerLanguage string       `xml:"complang"`
	ClickToGrid      bool         `xml:"clicktogrid"`
	Blocks           []Block      `xml:"blocks>block"`
	Connections      []Connection `xml:"connections>connection"`
}

// Block is an FBP component
type Block struct {
	X               int          `xml:"x"`
	Y               int          `xml:"y"`
	ID              int          `xml:"id"`
	Type            string       `xml:"type"` // see constants below
	Width           int          `xml:"width"`
	Height          int          `xml:"height"`
	Description     string       `xml:"description"`
	Invisible       bool         `xml:"invisible"`
	Multiplex       bool         `xml:"multiplex"`
	CodeFilename    string       `xml:"codefilename"`
	DiagramFileName string       `xml:"diagramfilename"`
	BlockClassName  string       `xml:"blockclassfilename"`
	MPXFactor       int          `xml:"mpxfactor"`              //TODO what is that?
	IsSubnet        bool         `xml:"issubnet"`               //TODO not part of the XML schema
	SubnetPorts     []SubnetPort `xml:"subnetports>subnetport"` //TODO not part of the XML schema
}

// types for Block.Type
// Source: https://github.com/jpaulm/drawfbp/blob/master/src/main/java/com/jpaulmorrison/graphics/Block.java
const TypeBlock = "B" // normal component
const TypeIIP = "I"
const TypeEnclosure = "O"  // subnet just for presentation purposes, has .IsSubnet = false
const TypeSubnet = "B"     // actual subnet with diagram path reference; has .IsSubnet = true
const TypeExtPortIn = "C"  // external resp. network port in
const TypeExtPortOut = "D" // external resp. network port out
const TypeExtPortOI = "E"  // external resp. network port in/out
const TypeLegend = "L"
const TypeFile = "F"
const TypePerson = "P"
const TypeReport = "R"

// SubnetPort is a port declaration for the enclosure block type
type SubnetPort struct {
	Y                  int    `xml:"y"`
	Name               string `xml:"name"`
	Side               string `xml:"side"` // L = input or R = output
	SubstreamSensitive bool   `xml:"substreamsensitive"`
}

// Connection is an FBP connection between two components
type Connection struct {
	FromX          int    `xml:"fromx"`
	FromY          int    `xml:"fromy"`
	ToX            int    `xml:"tox"`
	ToY            int    `xml:"toy"`
	FromID         int    `xml:"fromid"`
	ToID           int    `xml:"toid"`
	ID             int    `xml:"id"`
	UpstreamPort   string `xml:"upstreamport"`
	DownstreamPort string `xml:"downstreamport"`
	DropOldest     bool   `xml:"dropoldest"`
	EndsAtLine     bool   `xml:"endsatline"`
	Bends          []Bend `xml:"bends>bend"`
}

// Bend is a presentation-level bend of a connection
type Bend struct {
	X int `xml:"x"`
	Y int `xml:"y"`
}

// ParseNetwork parses a .drw XML file into a Network data structure, defined above
func ParseNetwork(drwPath string) (net *Network, err error) {
	// open .drw XML file
	xmlFile, err := os.Open(drwPath)
	if err != nil {
		return nil, err
	}
	defer xmlFile.Close()

	// read the file contents into a byte array
	xmlBytes, err := ioutil.ReadAll(xmlFile)
	if err != nil {
		return nil, err
	}

	// parse the XML data into the Network data structure
	root := File{}
	err = xml.Unmarshal(xmlBytes, &root)
	if err != nil {
		return nil, err
	}

	return &root.Network, nil
}
